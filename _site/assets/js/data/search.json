[
  
  {
    "title": "[Spring Security] 스프링 시큐리티 시작하기",
    "url": "/posts/likelion-be-week7-01/",
    "categories": "Study, Spring Security",
    "tags": "spring, springsecurity, java, intellij",
    "date": "2023-06-26 21:58:00 +0900",
    





    
    "snippet": "Spring Security란?스프링 시큐리티(Spring Security)란 애플리케이션의 보안 과 인증 에 관련된 작업을 쉽게 처리할 수 있도록 도와주는 스프링의 하위 프레임워크로, 다음과 같은 보안 기능을 제공한다.  사용자 인증 및 권한 부여  세션 관리, 암호화, 웹 보안  HTTP, OAuth, OpenID 등 다양한 인증 방식 지원  스프...",
    "content": "Spring Security란?스프링 시큐리티(Spring Security)란 애플리케이션의 보안 과 인증 에 관련된 작업을 쉽게 처리할 수 있도록 도와주는 스프링의 하위 프레임워크로, 다음과 같은 보안 기능을 제공한다.  사용자 인증 및 권한 부여  세션 관리, 암호화, 웹 보안  HTTP, OAuth, OpenID 등 다양한 인증 방식 지원  스프링 시큐리티는 스프링 프레임워크를 기반으로 하는 애플리케이션의 보안을 효과적으로 구현할 수 있는 강력한 도구이다.Spring Security 시작하기프로젝트 설정미리 준비된 스프링 시큐리티 프로젝트 폴더를 IntelliJ에서 열어주었다. (실습에는 JDK 11을 사용한다.)프로젝트 설정 옵션  Gradle - Groovy  Java 11  Spring Boot 2.7.13  Dependencies - Spring Web, Spring Securitybuild.gradle 설정build.gradle의 dependencies부분을 다음과 같이 설정한 다음 코끼리 버튼을 눌러 동기화해준다.우측 상단 ReRun 버튼을 클릭하여 열리는 로컬 서버로 접속하여 제대로 실행되는지 확인한다. localhost:8080 주소로 접속했을 때 아래와 같이 로그인 화면이 나와야 한다.스프링 시큐리티는 기본적으로 모든 서비스에 대해 인증된 사용자만 접속을 허용한다. 따라서로그인 없이도 서비스에 접근할 수 있도록 SecurityConfig.java 코드를 수정한다.메인 java 파일 경로에 SecurityConfig.java 를 생성하고 내부 URL 필터를 적용하여 모든 인증되지 않은 요청을 허락하도록 변경한다.재실행 시 기존 로그인 화면 대신 Whitelabel Error 페이지로 접속된다.초기화 작업 및 보안 설정스프링 시큐리티 프로젝트의 모든 기능에는 기본적으로 보안 기능이 적용되어 있다. 초기 설정 시 모든 요청은 인증이 되어야만 자원의 접근이 가능하므로 따로 설정해주어야 한다.인증 방식으로는 form 로그인 방식과 httpbasic 로그인 방식이 제공된다. 로그인 가능한 기본 계정은 한 개만 제공되며 콘솔 창에 출력되는 랜덤 문자열을 입력하여 로그인할 수 있다.다만 매번 생성되는 랜덤 문자열을 입력하여 로그인하는 것은 불편하기 때문에 다음과 같이 application.properties에서 기본 name과 password를 설정할 수 있다.스프링 시큐리티는 기본적인 보안 기능을 제공하지만 계정 및 권한을 추가하거나 데이터베이스를 연동하기 복잡하다는 단점이 있고, 시스템에서 필요한 추가적인 보안 기능을 설정해주어야 하는 경우가 있다."
  },
  
  {
    "title": "Jekyll Chirpy 테마 오류 해결 일지",
    "url": "/posts/jekyll-sidebar-toc-error/",
    "categories": "Blog",
    "tags": "jekyll, ruby, blog, vercel",
    "date": "2023-06-26 13:31:00 +0900",
    





    
    "snippet": "지난 포스팅에서 Chirpy 테마를 이용해 Jekyll 테마를 성공적으로 배포하였다고 생각하였으나 예상치 못한 오류가 발생하였다. 발생한 오류는 다음과 같다.  다크모드 적용 X  TOC 자동 생성 X  모바일 화면에서 사이드바 및 검색 기능 작동 Xchirpy 테마가 자랑하는 핵심적인 기능이 작동하지 않았기 때문에 github issue와 stack...",
    "content": "지난 포스팅에서 Chirpy 테마를 이용해 Jekyll 테마를 성공적으로 배포하였다고 생각하였으나 예상치 못한 오류가 발생하였다. 발생한 오류는 다음과 같다.  다크모드 적용 X  TOC 자동 생성 X  모바일 화면에서 사이드바 및 검색 기능 작동 Xchirpy 테마가 자랑하는 핵심적인 기능이 작동하지 않았기 때문에 github issue와 stackoverflow를 열심히 뒤져서 오류를 해결하였다. 해결하는 과정에서 도움이 되었던 한국어 문서는 단 한 건도 없었기 때문에 똑같은 오류를 겪고 있는 분들이 내 블로그를 보고 시간낭비 없이 오류를 해결하였으면 한다.먼저 강조하고 싶은 것은 본인의 로컬 환경이 아닌 Jekyll 블로그 테마 상의 문제라고 생각되었을 때 가장 먼저 찾아봐야 하는 것은 구글링이 아니라 해당 테마의 github issue 탭이다.내가 겪고 있는 오류는 해당 테마를 사용하는 사람들 중 단 한 사람이라도 먼저 겪었을 확률이 높다. 그렇기에 github issue 탭에는 해당 테마를 다양한 환경에서 적용하였을 때 발생할 수 있는 거의 모든 상황들에 대한 해결책이 언급되어 있다.거두절미하고, 여러가지 삽질을 반복하며 오류를 해결한 결과 위의 3가지 오류는 모두 같은 원인에 의해 발생한 문제였다. 시간이 꽤나 걸린 이유는 저 3가지 오류가 발생하였음에도 불구하고 로컬 환경과 빌드 환경에서 모두 정상적으로 배포되었기 때문이다.일단 내가 놓친 오류 메시지부터 읽어보았다. 로컬에서 서버가 실행중이라는 메시지에 가려졌던 한 가지 오류 메시지가 보였다./assets/js/dist/ 경로에 위치한 home.min.js 와 post.min.js 파일을 찾을 수 없다는 것인데, 프로젝트 폴더 내의 해당 위치로 가서 파일을 찾아보았으나 애초에 assets 폴더 안에 dist라는 폴더 자체가 존재하지 않았다. 원래부터 없는 파일을 어떻게 찾아야 하나 고민하던 중 일단 github issue 를 참고하기로 했다. 아니나 다를까 닫힌 이슈 문서들 중 내가 마주한 오류 상황을 여러 건 볼 수 있었다.몇 가지의 issue 를 더 읽어보던 중 가장 도움이 되었던 issue는 이것이었다. .gitignore 파일에 asset/js/dist 가 등록되어 있는 상황에서 해당 파일을 찾지 못한 것이 원인이었고, 해당 파일은 애초에 내가 테마를 clone받을 때부터 프로젝트 폴더 내에 존재하지 않았던 것이다. 이로 인해 개발자님께서 따로 Repo를 생성하여 asset/js/dist 에 포함될 정적 파일들을 따로 업로드하여 관리하고 계셨다.이슈 메시지를 읽어본 결과 내가 해석한 바로는 chirpy-demo 저장소에 들어가서 로컬에 없는 파일들을 수동으로 추가한 후 .gitignore에서 asset/js/dist를 제거하면 해결되는 문제였다.이곳에 올려져 있는 6개의 js 파일을 복사하여 로컬에 추가한 후 .gitignore 설정에서 asset/js/dist 경로를 주석 처리하고 커밋했더니 toc, 다크모드, 모바일 사이드바 문제가 한번에 해결되었다."
  },
  
  {
    "title": "Jekyll Chirpy 테마로 나만의 기술 블로그 만들기",
    "url": "/posts/jekyll-chirpy-theme-blog/",
    "categories": "Blog",
    "tags": "jekyll, ruby, blog, vercel",
    "date": "2023-06-24 17:17:00 +0900",
    





    
    "snippet": "Jekyll의 인기있는 테마 중 하나인 Chirpy를 이용해 기술 블로그를 만들어 보려고 한다. 전에 github pages를 이용하여 배포를 시도하였으나, 유독 Chirpy 테마만 제대로 빌드되지 않았던 기억이 있다. 현재는 개인 커스텀 도메인도 소유하고 있어 굳이 github.io 를 사용할 필요가 없기에 배포는 Vercel 을 이용하여 진행할 것...",
    "content": "Jekyll의 인기있는 테마 중 하나인 Chirpy를 이용해 기술 블로그를 만들어 보려고 한다. 전에 github pages를 이용하여 배포를 시도하였으나, 유독 Chirpy 테마만 제대로 빌드되지 않았던 기억이 있다. 현재는 개인 커스텀 도메인도 소유하고 있어 굳이 github.io 를 사용할 필요가 없기에 배포는 Vercel 을 이용하여 진행할 것이다. 1. Ruby 설치Jekyll을 사용하여 기술 블로그를 만들기 위해서는 먼저 Ruby와 jekyll 을 로컬 컴퓨터에 설치해야 한다. 윈도우 환경에서는 Ruby 공식 사이트를 통해 다운받거나 chocolatey 같은 패키지 매니저를 이용하여 Ruby를 설치한다.Ruby를 설치하였다면 터미널에 접속하여 다음 명령어로 jekyll을 설치한다. 이때 반드시 관리자 권한으로 접속해야 한다. 그렇지 않으면 아예 bundler 자체가 설치되지 않는다. gem install jekyll bundler이제 원하는 커스텀 테마를 적용해 볼 것이다. 해당 포스팅은 Chirpy 테마를 기준으로 설명한다. 각 테마마다 설정이 조금씩 다를 수 있으니 공식 Repo의 README를 잘 읽어보도록 하자. 2. Chirpy 테마 다운로드chirpy 테마의 공식 Repo는 이곳에서 확인할 수 있다. 로컬 폴더에 git을 연결하고 아래와 같이 chirpy 테마의 최신 버전을 clone한다.git clone https://github.com/cotes2020/jekyll-theme-chirpy.gitchirpy 테마에 필요한 의존성을 설치하기 위해 다음 명령을 입력한다.bundle installBundle complete라는 메시지가 뜨면 정상적으로 설치된 것이다. 설정 파일을 수정하지 않은 초기 테마가 잘 적용되는지 확인하기 위해 로컬 서버를 구동해 보자.bundle exec jekyll serveServer address 부분을 보면 로컬 서버의 주소가 http://127.0.0.1:4000 인 것을 알 수 있다. 해당 주소에 접속하여 제대로 실행되는지 확인해 보자.다음과 같이 chirpy 테마가 적용된 사이트에 연결된다면 로컬 설정은 끝났다.3. 테마 초기화 작업앞에서 clone받아 로컬에서 실행한 화면은 chirpy 테마의 Demo 사이트이기에 개발자의 마음대로 커스텀되어 있는 상태이다. 테마를 초기화하고 설정 정보를 수정하여 나만의 블로그로 세팅한 후 배포하여야 한다.먼저 아래 명령을 입력하여 chirpy 테마를 초기화한다.bash tools/init윈도우 터미널 환경에서는 위 명령어가 작동하지 않는데, git bash나 WSL 를 이용하면 된다. 초기화 작업을 완료하였다면 임시 post 와 로컬 파일의 초기 정보들이 삭제되었을 것이다.4. _config.yml 파일 수정하기Jekyll 블로그의 기본적인 설정 정보는 _config.yml 파일에 포함되어 있다. 해당 파일을 수정하여 나만의 블로그를 커스텀해보자.chirpy 테마는 아주 친절한 편이라 각 속성에 어떤 정보를 입력해야 하는지 주석으로 알려주고 있다. 세부적인 속성에 대한 설명은 이곳에 더 자세하게 설명되어 있으니 참고하면 좋을 것 같다.원하는 대로 설정 정보를 변경한 후 다시 로컬 서버를 구동하면 변경 사항이 적용된 블로그 사이트가 보일 것이다. 이제 vercel에서 커스텀 도메인을 연결하여 배포하기만 하면 된다. 5. Vercel을 이용하여 배포하기지금까지 설정한 jekyll 파일들을 github 원격 저장소에 업로드한 후 Vercel로 배포해 보겠다.새로운 Repository를 생성한 후 로컬 폴더를 push하고 Vercel Dashboard로 들어가서 배포를 진행한다. (github.io 도메인을 사용하지 않을 것이라면 굳이 repository 이름을 github.io로 설정할 필요는 없다)이때 가끔 _site 폴더가 .gitignore에 등록되어 있는 경우가 있다. Vercel은 Jekyll을 빌드한 후 _site 폴더를 찾아서 배포하기 때문에 프로젝트 폴더 내에 _site가 존재해야 한다.Domains 속성에 커스텀 도메인 주소를 추가하면 해당 링크로 블로그에 접속할 수 있다.수많은 Jekyll 테마를 봐 왔지만 chirpy만큼 디자인이 깔끔하면서도 기술적으로 다양한 기능을 제공하는 테마는 없는 것 같다. 기술 블로그로 활용하기에 최적의 테마가 아닐까 싶다."
  },
  
  {
    "title": "웹의 기본 구조",
    "url": "/posts/springboot-02-web/",
    "categories": "Study, Spring Boot",
    "tags": "springboot, java",
    "date": "2023-06-12 22:40:00 +0900",
    





    
    "snippet": "본격적인 스프링부트 개발에 앞서서 웹을 구성하는 클라이언트와 서버의 개념을 알아보고 두 요소 간의 통신을 가능하게 해주는 프로토콜인 HTTP와 HTTP 프로토콜을 사용하여 데이터를 주고받을 수 있게 하는 REST API의 개념에 대해 알아보자.클라이언트와 서버컴퓨터 네트워크 상에서 상호작용하는 두 가지 요소는 클라이언트와 서버이다. 클라이언트(Clie...",
    "content": "본격적인 스프링부트 개발에 앞서서 웹을 구성하는 클라이언트와 서버의 개념을 알아보고 두 요소 간의 통신을 가능하게 해주는 프로토콜인 HTTP와 HTTP 프로토콜을 사용하여 데이터를 주고받을 수 있게 하는 REST API의 개념에 대해 알아보자.클라이언트와 서버컴퓨터 네트워크 상에서 상호작용하는 두 가지 요소는 클라이언트와 서버이다. 클라이언트(Client)는 서비스를 요청하는 주체로, 웹 브라우저나 모바일 애플리케이션 상에서 특정한 동작을 통해 서버로 요청을 보내는 역할을 한다. 서버(Server)는 클라이언트의 요청을 받아 처리하고, 필요한 작업을 수행하여 클라이언트에게 데이터나 서비스를 제공하는 역할을 한다.쉽게 말해서 클라이언트는 서비스를 사용하는 컴퓨터, 서버는 서비스를 제공하는 컴퓨터라고 생각할 수 있다. 이때 서비스(Service)는 클라이언트와 서버 간의 통신을 통해 제공하고자 하는 기능을 말한다.현대의 웹은 클라이언트(프론트엔드), 서버(백엔드)로 구분하여 HTTP를 기반으로 하는 REST API를 이용하여 통신한다.HTTP란?HTTP란 인터넷에서 클라이언트와 서버 간의 통신을 가능하게 해주는 프로토콜이다. 웹에서는 웹 브라우저와 웹 서버 사이의 HTML 문서를 교환하기 위한 통신 규약으로 사용된다. HTTP 는 기본적으로 요청(Request)과 응답(Response) 구조로 이루어져 있다. 클라이언트가 웹 브라우저를 통해 HTTP 요청을 서버로 보내면 서버는 클라이언트에게 HTTP 응답을 반환한다. 이러한 요청과 응답을 통해 웹 페이지의 내용을 주고받는다.HTTP methodHTTP 메서드란 클라이언트가 서버에게 요청하는 동작의 종류를 나타내는 식별자이다. 클라이언트는 요청 시 원하는 동작을 명시하기 위해 특정한 HTTP 메서드를 지정한다. 일반적으로 사용되는 HTTP 메서드는 다음과 같다.  GET : 특정한 자원을 조회하도록 요청한다.  POST : 특정한 자원을 생성하거나 상태 변경을 요청한다.  PUT : 특정한 자원을 업데이트하도록 요청한다.  DELETE : 특정한 자원을 삭제하도록 요청한다.HTTP Request클라이언트는 위의 4가지 요청을 HTTP 요청 메시지에 포함시켜 서버로 전송한다. HTTP 요청 메시지는 다음과 같이 크게 3개의 부분으로 구성된다.  시작 줄(Start Line) : 요청 메서드, 대상 URI, HTTP 프로토콜 버전  헤더(Headers) : 요청에 대한 추가 정보 (host, content-type 등)  본문(Body) : 클라이언트가 서버로 전달하려는 데이터(텍스트, json, xml, 이미지 등)HTTP Response서버는 클라이언트로부터 전달받은 요청을 처리한 후 HTTP 응답 메시지에 특정 정보를 포함하여 다시 클라이언트에게 전송한다. 이때 응답 메시지는 다음과 같은 요소들을 포함한다.  Status Line: HTTP 버전 정보와 상태 코드, 상태 메시지를 포함한다.  Headers : 응답에 대한 추가 정보를 포함한다.  Body : 응답의 실제 내용을 포함한다.아래에서 설명할 REST API 역시 HTTP 메서드를 기반으로 동작한다.REST APIREST API란 HTTP 프로토콜을 기반으로 하여 클라이언트와 서버가 정보를 주고받을 수 있도록 하는 애플리케이션 프로그래밍 인터페이스이다. 여기서 REST란 URI와 HTTP 메소드를 사용하여 자원과 행위를 표현하는 하나의 아키텍쳐 스타일을 의미한다.먼저 REST API에서 중요하게 사용되는 개념인 URI에 대해 알아보자. URI란 Uniform Resource Identifier의 약자로, 인터넷에서 특정한 자원을 고유하게 식별하기 위해 사용되는 일련의 문자열을 말한다. 클라이언트가 특정한 자원을 조회하기 위한 GET 요청을 보낼 때, 해당 자원의 URI를 사용하여 접근할 수 있게 된다.예를 들어 user라는 경로에 있는 ID가 1인 사용자 정보를 조회하는 GET 요청을 보내려면 /user/1 이라는 URI를 사용하여 해당 사용자의 정보를 요청할 수 있다.웹 개발 진영에서 REST API가 지배적인 이유는 URI를 이용하여 클라이언트가 원하는 특정 자원을 명확하게 식별할 수 있으며, HTTP 메서드를 기반으로 간결하고 직관적인 API 설계가 가능하기 때문이다."
  },
  
  {
    "title": "Spring Boot 개발환경 구축 (IntelliJ)",
    "url": "/posts/springboot-01-setup/",
    "categories": "Study, Spring Boot",
    "tags": "springboot, java",
    "date": "2023-05-27 14:58:00 +0900",
    





    
    "snippet": "스프링부트란?기존 스프링 프레임워크의 복잡한 환경 설정을 간소화하여 쉽고 빠르게 개발을 시작할 수 있도록 도와주는 경량화 프레임워크이다. 스프링부트는 다음과 같은 편리함을 제공한다.  내장 Tomcat 서버를 통한 빠르고 간편한 배포  starter를 통한 의존성 관리 자동화  xml 설정 자동화를 통한 복잡한 설정 간소화스프링부트 개발환경 구축하기 ...",
    "content": "스프링부트란?기존 스프링 프레임워크의 복잡한 환경 설정을 간소화하여 쉽고 빠르게 개발을 시작할 수 있도록 도와주는 경량화 프레임워크이다. 스프링부트는 다음과 같은 편리함을 제공한다.  내장 Tomcat 서버를 통한 빠르고 간편한 배포  starter를 통한 의존성 관리 자동화  xml 설정 자동화를 통한 복잡한 설정 간소화스프링부트 개발환경 구축하기  해당 포스팅은 사전에 IntelliJ 및 Java JDK 11이 설치되어 있다고 가정하고 진행한다.Spring Initializer 구성Spring Initializer란 스프링에서 공식 지원하는 웹 기반의 프로젝트 생성 도구이다. start.spring.io에 접속하여 본인이 사용할 빌드 툴, 언어, JDK 버전 및 Dependency를 설정한 후 zip 파일을 다운로드한다.해당 포스팅에서 사용하는 기본 옵션은 다음과 같다.  Project : Gradle-Groovy  Language : Java 11  Spring Boot 버전 : 2.7.12  Packaging : Jar  Dependency : Spring web 및 LombokDependency를 추가하려면 우측 상단의 ADD DEPENDENCY 버튼을 클릭하여 Spring web과 Lombok 옵션을 선택한다.Project Metadata는 임의로 설정 가능하다.IntelliJ에서 Spring Boot 프로젝트 열기위에서 다운받은 zip 파일을 압축 해제한 후 IntelliJ에서 열면 자동으로 스프링부트 개발 환경이 세팅된다.위와 같이 BUILD SUCCESSFUL 메시지가 출력된다면 프로젝트 빌드를 위한 환경 설정이 정상적으로 완료된 것이다.SpringBoot 프로젝트 구조본격적인 개발을 시작하기 전에 스프링부트 프로젝트는 어떤 구조로 이루어져 있는지 살펴보자.Initializer로 생성한 초기 프로젝트 폴더는 위와 같은데, 이 중 개발자가 알아야 할 부분은 src 폴더 및 build.gradle 정도라고 할 수 있다.  src/main/java : Controller, DTO, Entity, Service 역할을 하는 여러 개의 java 파일이 저장된다.  src/main/resource : html, css, javascript 등 java 파일을 제외한 템플릿 파일과 정적 리소스들이 위치한다.  src/test : 프로젝트 파일을 테스트하기 위한 테스트 코드를 작성하는 공간이다. 규모 있는 애플리케이션을 만들고자 할 때 단위 테스트 등의 테스트 주도 방법론(TDD)을 도입하게 되는 경우가 많은데, 이때 JUnit 등의 테스트 도구를 이용하여 서버를 실행하지 않은 상태에서 src/main/java 내의 코드를 실행할 수 있다.  build.gradle : Groovy를 기반으로 한 빌드 도구인 Gradle의 환경 설정을 위한 각종 플러그인과 라이브러리 정보가 저장된다.이외에 다른 파일들은 개발자가 건드릴 필요가 없거나 스프링부트에 의해 자동으로 관리되는 파일이다. 설명이 필요할 때 다시 언급하도록 하겠다.SpringBoot 실행하기지금까지 스프링부트 개발 환경 세팅을 완료하였으니 간단하게 Hello World를 출력해 보자. src/main/java 폴더 내에 ~Application.java 이름으로 생성된 자바 파일을 보면 main 함수가 포함되어 있다. (해당 포스팅에서 설정한 패키지 이름은 start이므로 com.example.start 폴더 안에 StartApplication.java라는 파일이 존재한다.) 이 파일이 바로 스프링부트 코드가 실행되는 시작점이다.해당 main 함수 안에 Hello World를 출력하는 코드를 추가하고 Run을 눌러 실행시키면 다음과 같이 정상적으로 실행된다."
  },
  
  {
    "title": "[Spring Boot] 웹의 기본 구조와 HTTP 통신",
    "url": "/posts/springboot-01/",
    "categories": "Study, Spring Boot",
    "tags": "web, http, network",
    "date": "2023-05-22 19:17:00 +0900",
    





    
    "snippet": "본격적인 Spring Boot 개발에 앞서 웹을 구성하는 클라이언트와 서버의 개념을 알아보고, 두 요소 간의 통신을 가능하게 해주는 HTTP 프로토콜과 REST API에 대해 알아보자.클라이언트와 서버컴퓨터 네트워크 상에서 상호작용하는 두 가지 요소는 클라이언트와 서버이다. 클라이언트(Client)는 서비스를 요청하는 주체로, 웹 브라우저나 모바일 애...",
    "content": "본격적인 Spring Boot 개발에 앞서 웹을 구성하는 클라이언트와 서버의 개념을 알아보고, 두 요소 간의 통신을 가능하게 해주는 HTTP 프로토콜과 REST API에 대해 알아보자.클라이언트와 서버컴퓨터 네트워크 상에서 상호작용하는 두 가지 요소는 클라이언트와 서버이다. 클라이언트(Client)는 서비스를 요청하는 주체로, 웹 브라우저나 모바일 애플리케이션 상에서 특정한 동작을 통해 서버로 요청을 보내는 역할을 한다. 서버(Server)는 클라이언트의 요청을 받아 처리하고, 필요한 작업을 수행하여 클라이언트에게 데이터나 서비스를 제공하는 역할을 한다. 쉽게 말해서 클라이언트는 서비스를 사용하는 컴퓨터, 서버는 서비스를 제공하는 컴퓨터라고 생각하면 된다. HTTP란?HTTP란 HyperText Transfer Protocol의 약자로, 인터넷 상에서 데이터를 주고받을 수 있도록 하는 통신 규약(프로토콜)이다. 웹 환경에서는 웹 브라우저와 웹 서버 사이의 html 문서를 교환하기 위한 통신 규약을 사용된다.  HTTP는 기본적으로 요청(Request)와 응답(Response) 구조로 이루어져 있다. 클라이언트가 웹 브라우저를 통해 HTTP 요청을 서버로 보내면 서버는 클라이언트에게 HTTP 응답을 반환한다. 이러한 요청과 응답을 주고받으며 웹 페이지의 내용을 주고받는다. 여기서 HTTP 요청이란 클라이언트가 웹 브라우저를 통해 특정한 동작을 수행하여 서버로 원하는 작업을 요청하는 것을 말한다.  예를 들면 사이트의 ‘회원가입’ 버튼을 눌러 회원가입 페이지로 이동하게끔 하는 것, 블로그에 글을 쓸 때 ‘발행’ 버튼을 눌러 누구든지 내 글을 볼 수 있게끔 하는 것 등이 모두 HTTP 요청을 통해 이루어지는 것이다. 이때 서버에 전달되는 HTTP 요청은 특정한 요청 메소드와 헤더, 바디를 포함한다. 일반적으로 자주 사용되는 요청 메소드는 아래와 같다.   GET :  서버로부터 특정한 리소스를 요청한다. 클라이언트로부터 GET 요청을 전달받은 서버는 요청한 리소스를 가져와 응답으로 반환한다.  POST : 서버로 데이터를 제출거나 새로운 리소스를 생성할 때 사용된다. 클라이언트는 요청 본문에 데이터를 담아 서버로 전송하며, 서버는 일반적으로 생성된 리소스의 정보를 응답으로 반환한다.  PUT : 서버에 데이터를 전송하여 새로운 리소스를 생성하거나 기존 리소스를 업데이트할 때 사용된다. POST 요청과 마찬가지로 요청 본문에 데이터를 담아 서버로 전송한다.  DELETE : 특정 리소스를 삭제하기 위해 사용한다. 클라이언트는 특정 리소스의 url로 DELETE 요청을 보냄으로서 서버에게 영구적인 리소스 삭제를 요청한다. 이때 삭제된 리소스는 복구할 수 없기 때문에 신중하게 사용해야 한다.위의 4가지 요청 메소드는 REST API에서 자주 사용되므로 잘 알아두어야 한다.  요청 헤더(Request Headers)는 User-Agent, Content-Type, Authorization 등 요청에 대한 부가 정보를 제공하는 다양한 헤더 필드가 포함된다. 요청 바디(Request Body)에는 POST 또는 PUT 요청과 같이 데이터를 서버로 전송해야 하는 요청에서 Json, xml, form data 등 요청에 필요한 데이터가 포함된다.HTTP RequestHTTP 응답이란 서버가 클라이언트로부터 받은 요청에 대한 처리 결과를 반환하는 메시지이다. 이때 HTTP 응답 메시지는 상태 코드, 헤더, 바디로 구성된다. 상태 코드는 HTTP 응답 메시지의 상태를 나타내는 세 자리 숫자로, 각 숫자 코드마다 특정한 의미를 가진다. 일반적으로 요청이 성공적으로 처리되었을 때는 상태 코드 200을 사용한다.  응답 헤더(header)는 Content-type, Content-length, Cache-Control 등 응답 데이터에 대한 메타 정보를 포함한다. 응답 바디(Body)에는 요청한 페이지의 html 내용이나 API의 Json등 클라이언트에게 전달되는 __실제 응답 데이터__가 포함된다.HTTP ResponseHTTP 요청과 응답은 웹 애플리케이션 개발에서 프론트엔드(클라이언트)와 백엔드(서버)간의 통신을 가능하게 하는 중요한 개념으로 다음 포스팅에서 설명할 REST API의 기반이 되는 통신 프로토콜이다."
  }
  
]

